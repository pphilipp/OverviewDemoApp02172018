def versionMajor = 0
def versionMinor = 0
def versionPatch = 8
def versionBuild = "001"

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'

apply plugin: 'io.fabric'


android {
    compileSdkVersion setup.compileSdk
    buildToolsVersion setup.buildTools

    defaultConfig {

        vectorDrawables.useSupportLibrary = true

        minSdkVersion setup.minSdk
        targetSdkVersion setup.targetSdk

        applicationId setup.androidApplicationId
        versionCode setup.androidVersionCode
        versionName setup.androidVersionName
        testInstrumentationRunner setup.testInstrumentationRunner
        testApplicationId setup.testApplicationId

        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild.toInteger()

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage' //Some libraries have issues with this.
        disable 'OldTargetApi' //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities' //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder' //For testing purpose. This is safe to remove.
    }

    signingConfigs {
        debug {
            storeFile file('../buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
    }

    // Specifies flavor dimensions.
    flavorDimensions "tier"

    productFlavors {
        prod {
            buildConfigField 'String', 'HOST', '"feed.entertainment.tv.theplatform.eu"'
            dimension "tier"
        }
        dev {
            applicationIdSuffix ".dev"
            versionNameSuffix ".${versionBuild}.dev"

            buildConfigField 'String', 'HOST', '"mobileapi"'

            dimension "tier"
        }
        staging {
            applicationIdSuffix ".staging"
            versionNameSuffix ".${versionBuild}.staging"

            buildConfigField 'String', 'HOST', '"mobileapi"'

            dimension "tier"
        }
        qa {
            applicationIdSuffix ".testing"
            versionNameSuffix ".${versionBuild}.testing"

            buildConfigField 'String', 'HOST', '"mobileapi"'

            dimension "tier"
        }

    }
}

afterEvaluate {
    initFabricPropertiesIfNeeded()
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {

        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: System.getenv('FABRIC_API_SECRET'))
            entry(key: "apiKey", value: System.getenv('FABRIC_API_KEY'))
        }
    }
}

dependencies {
    // Injections
    implementation "com.google.dagger:dagger:${versions.daggerVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    annotationProcessor "com.google.dagger:dagger-compiler:${versions.daggerVersion}"
    implementation "com.jakewharton:butterknife:${versions.butterKnifeVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${versions.butterKnifeVersion}"
    implementation "javax.inject:javax.inject:${versions.javaxInjectVersion}"
    implementation "com.fernandocejas:arrow:${versions.arrowVersion}"

    // playback
    implementation 'com.google.android.exoplayer:exoplayer:2.6.1'

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxJavaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxAndroidVersion}"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofitRxJavaAdapter}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofitGsonConverter}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.loggingInterceptor}"

    // Tools
    implementation "com.jakewharton.timber:timber:${versions.timberVersion}"
    implementation("com.crashlytics.sdk.android:crashlytics:${versions.crashlyticsVersion}") {
        transitive = true
    }
    implementation "com.squareup.leakcanary:leakcanary-android:${versions.leakCanaryVersion}"
    implementation "com.github.amatkivskiy:result:${versions.result}"
    implementation "info.android15.solid:streams:${versions.solid}"

    // ui
    implementation "com.facebook.shimmer:shimmer:${versions.facebookShimmer}"

    // Support
    implementation "com.android.support.constraint:constraint-layout:${versions.constraintLayout}"
    implementation "com.android.support:design:${versions.design}"
    implementation "com.android.support:recyclerview-v7:${versions.recyclerViewVersion}"
    implementation "com.android.support:cardview-v7:${versions.cardViewVersion}"
    implementation "com.squareup.picasso:picasso:${versions.picassoImageLoader}"

    // Data
    provided "javax.annotation:jsr250-api:${versions.javaxAnnotationVersion}"
    implementation "com.squareup.okhttp:okhttp:${versions.okHttpVersion}"
    implementation "com.google.code.gson:gson:${versions.gsonVersion}"
    implementation "com.android.support:support-annotations:${versions.androidAnnotationsVersion}"

    // Unit Testing
    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.mockwebserver}"
    testImplementation "org.mockito:mockito-core:${versions.mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${versions.assertJVersion}"
    testImplementation "junit:junit:${versions.jUnitVersion}"

    androidTestImplementation "org.mockito:mockito-core:${versions.mockitoVersion}"
    androidTestImplementation "com.google.dexmaker:dexmaker:${versions.dexmakerVersion}"
    androidTestImplementation "com.google.dexmaker:dexmaker-mockito:${versions.dexmakerVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${versions.espressoVersion}"
    androidTestImplementation "com.android.support.test:testing-support-lib:${versions.testingSupportLibVersion}"

    androidTestImplementation "junit:junit:${versions.jUnitVersion}"
    androidTestImplementation "org.assertj:assertj-core:${versions.assertJVersion}"
    androidTestImplementation "org.robolectric:robolectric:${versions.robolectricVersion}"
    compile 'org.jetbrains:annotations:15.0'
}